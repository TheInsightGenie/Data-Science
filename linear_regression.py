# -*- coding: utf-8 -*-
"""linear-regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/dataprofessor/code/blob/master/python/linear_regression.ipynb

# **Build Linear Regression Model in Python**

Kenny Deepnarine

In this Jupyter notebook, I will be showing you how to build a linear regression model in Python using the scikit-learn package.

Inspired by [scikit-learn's Linear Regression Example](https://scikit-learn.org/stable/auto_examples/linear_model/plot_ols.html)

---

## **Load the Diabetes dataset** (via scikit-learn)

### **Import library**
"""

from sklearn import datasets

"""### **Load dataset**"""

diabetes = datasets.load_diabetes()

diabetes

"""### **Description of the Diabetes dataset**"""

print(diabetes.DESCR)

"""### **Feature names**"""

print(diabetes.feature_names)

"""### **Create X and Y data matrices**"""

x = diabetes.data
y = diabetes.target

X.shape, Y.shape

"""### **Load dataset + Create X and Y data matrices (in 1 step)**"""

X, Y = datasets.load_diabetes(return_X_y=True)

X.shape, Y.shape

"""## **Data split**

### **Import library**
"""

from sklearn.model_selection import train_test_split

"""### **Perform 80/20 Data split**"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)

"""### **Data dimension**"""

X_train.shape, Y_train.shape

X_test.shape, Y_test.shape

"""## **Linear Regression Model**

### **Import library**
"""

from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score

"""### **Build linear regression**

#### Defines the regression model
"""

model = linear_model.LinearRegression()

"""#### Build training model"""

model.fit(X_train, Y_train)

"""#### Apply trained model to make prediction (on test set)"""

Y_pred = model.predict(X_test)

"""## **Prediction results**

### **Print model performance**
"""

# Commented out IPython magic to ensure Python compatibility.
print('Coefficients:', model.coef_)
print('Intercept:', model.intercept_)
print('Mean squared error (MSE): %.2f'
#       % mean_squared_error(Y_test, Y_pred))
print('Coefficient of determination (R^2): %.2f'
#       % r2_score(Y_test, Y_pred))

print(diabetes.feature_names)

"""### **String formatting**

By default r2_score returns a floating number ([more details](https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html))
"""

r2_score(Y_test, Y_pred)

# Instead of trying to get the dtype of the R-squared score,
# which is a single float value, you can simply print the score itself.
print(r2_score(Y_test, Y_pred))

# If you need the data type of the score, you can use the type() function:
print(type(r2_score(Y_test, Y_pred))) # This will print <class 'float'>

"""We will be using the modulo operator to format the numbers by rounding it off."""

'%f' % 0.523810833536016

"""We will now round it off to 3 digits"""

'%.3f' % 0.523810833536016

"""We will now round it off to 2 digits"""

'%.2f' % 0.523810833536016

"""## **Scatter plots**

### **Import library**
"""

import seaborn as sns

"""### **Make scatter plot**

#### The Data
"""

Y_test

import numpy as np
np.array(Y_test)

Y_pred

"""#### Making the scatter plot"""

import seaborn as sns
import matplotlib.pyplot as plt # It's good practice to import this alongside seaborn


# Assuming Y_test and Y_pred are pandas Series or numpy arrays
sns.scatterplot(x=Y_test, y=Y_pred)
plt.show() # This is needed to display the plot in some environments

import seaborn as sns
import matplotlib.pyplot as plt # It's good practice to import this alongside seaborn

# Pass data as keyword arguments
sns.scatterplot(x=Y_test, y=Y_pred, marker="+")  # Corrected line
plt.show() # This is needed to display the plot in some environments

import seaborn as sns
import matplotlib.pyplot as plt

sns.scatterplot(x=Y_test, y= Y_pred, alpha=0.5)
plt.show()

